plugins {
    id("dev.kikugie.stonecutter") version "0.7.4"
    id("fabric-loom")
}
apply from: rootProject.file('buildscript/standalone.gradle')

configurations.configureEach {
    resolutionStrategy {
        force "org.slf4j:slf4j-api:1.7.36" // Introduced by Minecraft itself
    }
}

java {
    def version = Integer.parseInt(project.property("deps.java"))
    def javaVersion = version > 10
            ? JavaVersion.valueOf("VERSION_" + version)
            : JavaVersion.valueOf("VERSION_1_" + version)

    targetCompatibility = javaVersion
    sourceCompatibility = javaVersion
}

if(project.path.startsWith(":fabric:")) {
    tasks.register('deleteMappedSrc', Delete) {
        delete project.file("src")
    }

    clean.dependsOn deleteMappedSrc
}

sourceSets {
    main {
        java {
            srcDirs("versions/${stonecutter.current.project}/src/main/java")
        }
        resources {
            srcDirs("versions/${stonecutter.current.project}/src/main/resources")
        }
    }
}

processResources {
    def version = project.version
    def loaderVersion = project.property("deps.fabric_loader")
    def minecraftVersion = stonecutter.current.project

    inputs.property("version", version)
    inputs.property("loaderVersion", loaderVersion)
    inputs.property("minecraftVersion", minecraftVersion)

    filesMatching("fabric.mod.json") {
        expand(
            VERSION:          version,
            LOADER_VERSION:   loaderVersion,
            MINECRAFT_VERSION: minecraftVersion
        )
    }
    dependsOn generateRuntimeDownloadResourceForRuntimeDownloadOnly
}

shadowJar {
    configurations = [project.configurations.shadow]
    mergeServiceFiles()
}

stonecutter {
    def adventure = project.property("deps.adventure_platform_fabric").replace("-SNAPSHOT", "")
    dependency("adventure", adventure)
    dependency("java", project.property("deps.java"))

    swap("dependencies_file", "\"dependencies/runtimeDownload-${stonecutter.current.version}.txt\";")
}

tasks.register('copyRemappedJar', Copy) {
    from remapJar.archiveFile
    into rootProject.file('jars/fabric')
}

remapJar {
    dependsOn shadowJar
    mustRunAfter shadowJar
    inputFile = shadowJar.archiveFile

    archiveBaseName = "DiscordSRV-Fabric-${stonecutter.current.project}"
    if (stonecutter.current.version == "1.21.6") {
        archiveBaseName = "DiscordSRV-Fabric-${stonecutter.current.project}-1.21.8"
    } else if (stonecutter.current.version == "1.21.10-rc1") {
        archiveBaseName = "DiscordSRV-Fabric-1.21.9-${stonecutter.current.project}"
    }
    archiveClassifier = jar.archiveClassifier

    finalizedBy copyRemappedJar
}

spotless {
    java {
        if (stonecutter.current.isActive)
            target("src/main/java/")
    }
}

artifacts {
    archives remapJar
    shadow shadowJar
}

loom {
    serverOnlyMinecraftJar()
    runConfigs.all {
        ideConfigGenerated(true) // Run configurations are not created for subprojects by default
        runDir = "../../run" // Use a shared run folder and create separate worlds
    }
}

repositories {
    exclusiveContent {
        forRepository {
            maven { url = 'https://maven.fabricmc.net/' }
        }
        filter {
            includeGroup 'net.fabricmc'
        }
    }
    exclusiveContent {
        forRepository {
            maven { url = 'https://maven.nucleoid.xyz/' }
        }
        filter {
            includeGroup 'eu.pb4'
        }
    }
    mavenLocal()
}

dependencies {
    minecraft("com.mojang:minecraft:${stonecutter.current.project}")
    mappings("net.fabricmc:yarn:${project.property("deps.yarn_mappings")}:v2")
    compileOnly("net.fabricmc:fabric-loader:${project.property("deps.fabric_loader")}")

    // Fabric API
    Set<String> apiModules = [
            'fabric-api-base',
            'fabric-lifecycle-events-v1',
            'fabric-entity-events-v1',
            'fabric-networking-api-v1',
    ]
    if (stonecutter.eval(stonecutter.current.version, ">=1.19.2")) apiModules.add('fabric-message-api-v1')
    if (stonecutter.eval(stonecutter.current.version, "<1.21.9")) apiModules.add('fabric-resource-loader-v0')
    else apiModules.add('fabric-resource-loader-v1')

    apiModules.forEach {
        modImplementation(fabricApi.module(it, project.property("deps.fabric_api")))
    }

    // Minecraft versions under 1.21.6 should use 0.3.3, while 1.21.6 and above should use 0.4.1
    modImplementation("me.lucko:fabric-permissions-api:${stonecutter.eval(stonecutter.current.version, ">=1.21.6") ? '0.4.1' : '0.3.3'}") {
        exclude group: 'net.fabricmc.fabric-api', module: 'fabric-api-base'
        exclude group: 'net.fabricmc.fabric-api', module: 'fabric-api-bom'
    }
    include ("me.lucko:fabric-permissions-api:${stonecutter.eval(stonecutter.current.version, ">=1.21.6") ? '0.4.1' : '0.3.3'}")

    // API
    annotationProcessor project(':api')
    shadow project(':common:common-api')

    // Common
    shadow project(':common')

    // Adventure
    modImplementation("net.kyori:adventure-platform-fabric:${project.property("deps.adventure_platform_fabric")}") {
        exclude group: 'net.kyori', module: 'ansi'
    }
    include("net.kyori:adventure-platform-fabric:${project.property("deps.adventure_platform_fabric")}")

    implementation(libs.kyori.ansi)
    include(libs.kyori.ansi)

    // Integrations
    modCompileOnly("eu.pb4:placeholder-api:${project.property("deps.text_placeholder_api")}")

    // DependencyDownload
    shadow(libs.mcdependencydownload.fabric) {
        exclude module: 'fabric-loader'
    }
}
