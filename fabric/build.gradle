apply from: rootProject.file('buildscript/standalone.gradle')
apply plugin: 'fabric-loom'

configurations.configureEach {
    resolutionStrategy {
        force "org.slf4j:slf4j-api:1.7.36" // Introduced by Minecraft itself
    }
}

def javaVersion = property("deps.java") == 8 ? JavaVersion.VERSION_1_8 : property("deps.java") == 17 ? JavaVersion.VERSION_17 : property("deps.java") == 21 ? JavaVersion.VERSION_21 : null;
java {
    // deps.java
    targetCompatibility = javaVersion
    sourceCompatibility = javaVersion
}

processResources {
//    filesMatching('fabric.mod.json') {
//        expand 'VERSION': project.version,
//               'MINECRAFT_VERSION': ">=${stonecutter.current.property("mod.min_target")}- <=${stonecutter.current.property("mod.max_target")}",
//               'LOADER_VERSION': property("deps.fabric_loader"),
//               'JAVA_VERSION': property("deps.java")
//    }
    dependsOn generateRuntimeDownloadResourceForRuntimeDownloadOnly
}

shadowJar {
    configurations = [project.configurations.shadow]
    mergeServiceFiles()
}

stonecutter {
    def adventure = property("deps.adventure_platform_fabric")
    dependency("adventure", adventure)
}

tasks.register('copyRemappedJar', Copy) {
    from remapJar.archiveFile
    into rootProject.file('jars')
}

remapJar {
    dependsOn shadowJar
    mustRunAfter shadowJar
    inputFile = shadowJar.archiveFile
    archiveBaseName = 'DiscordSRV-Fabric'
    archiveClassifier = jar.archiveClassifier

    finalizedBy copyRemappedJar
}

artifacts {
    archives remapJar
    shadow shadowJar
}

loom {
    serverOnlyMinecraftJar()
}

repositories {
    exclusiveContent {
        forRepository {
            maven { url = 'https://maven.fabricmc.net/' }
        }
        filter {
            includeGroup 'net.fabricmc'
        }
    }
}

dependencies {
    minecraft("com.mojang:minecraft:${stonecutter.current.project}")
    mappings("net.fabricmc:yarn:${property("deps.yarn_mappings")}:v2")
    compileOnly("net.fabricmc:fabric-loader:${property("deps.fabric_loader")}")

    // Fabric API
    Set<String> apiModules = [
        'fabric-api-base',
        'fabric-lifecycle-events-v1',
        'fabric-entity-events-v1',
        'fabric-networking-api-v1',
    ]
    //? if minecraft: >=1.19
    /*apiModules.add('fabric-message-api-v1')*/
    apiModules.forEach {
        modImplementation(fabricApi.module(it, property("deps.fabric_api")))
    }

    modImplementation(libs.fabric.permissions.api)
    include(libs.fabric.permissions.api)

    // API
    annotationProcessor project(':api')
    shadow project(':common:common-api')

    // Common
    shadow project(':common')

    // Adventure
    modImplementation("net.kyori:adventure-platform-fabric:${property("deps.adventure_platform_fabric")}")
    include("net.kyori:adventure-platform-fabric:${property("deps.adventure_platform_fabric")}")

    // DependencyDownload
    shadow(libs.mcdependencydownload.fabric) {
        exclude module: 'fabric-loader'
    }
}